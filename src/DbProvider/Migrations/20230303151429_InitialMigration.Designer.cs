// <auto-generated />
using System;
using FlexiObject.DbProvider;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlexiOject.DbProvider.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230303151429_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.AppFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("AppFolderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AppFolder_Id");

                    b.Property<int>("FolderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Folder_Id");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("AppFolders");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.AppFolderField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppField")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AppField_id");

                    b.Property<int?>("AppFolderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FolderFieldId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FolderField_Id");

                    b.HasKey("Id");

                    b.HasIndex("AppFolderId");

                    b.HasIndex("FolderFieldId");

                    b.ToTable("AppFolderFields");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Department")
                        .HasMaxLength(254)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("TEXT");

                    b.Property<string>("DomainName")
                        .HasMaxLength(254)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("TEXT");

                    b.Property<byte>("GroupMail")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LoginMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginName")
                        .HasMaxLength(254)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ObjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Object_Id");

                    b.Property<string>("Password")
                        .HasMaxLength(254)
                        .HasColumnType("TEXT")
                        .IsFixedLength();

                    b.Property<string>("Phone")
                        .HasMaxLength(254)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId")
                        .IsUnique();

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.AppUsersUserGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserGroupId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("User_Group");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("AppUsers_UserGroups", (string)null);
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.AppearView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FolderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("UserId");

                    b.ToTable("AppearView");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.Condition", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Comparison")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KeyProperty")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("MatchAll")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Operator")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParamName")
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .IsFixedLength();

                    b.Property<short?>("ParamPos")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Property")
                        .HasColumnType("INTEGER");

                    b.Property<byte?>("PropertyFlag")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rule")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.ConditionParam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConditionId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("DoubleValue")
                        .HasColumnType("REAL");

                    b.Property<long>("LongValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LongValueHigh")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("ObjectType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StrValue")
                        .HasMaxLength(120)
                        .HasColumnType("TEXT")
                        .IsFixedLength();

                    b.Property<byte>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConditionId");

                    b.HasIndex("ObjectId");

                    b.ToTable("ConditionParams");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.ConditionStps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConditionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserFieldId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConditionId");

                    b.HasIndex("UserFieldId");

                    b.ToTable("ConditionSteps");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.ConditionValueFields", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CondParamsId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FieldId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CondParamsId");

                    b.HasIndex("FieldId");

                    b.ToTable("ConditionValueFields");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.DefaultValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("FolderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("folder");

                    b.Property<byte>("Type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type");

                    b.Property<int>("UserFieldId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userfield");

                    b.Property<long?>("ValBigint")
                        .HasColumnType("INTEGER")
                        .HasColumnName("val_bigint");

                    b.Property<string>("ValStr")
                        .HasColumnType("TEXT")
                        .HasColumnName("val_str");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("UserFieldId");

                    b.ToTable("DefaultValues");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.DeletionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FolderId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeletedTime");

                    b.HasIndex("FolderId");

                    b.HasIndex("ObjectId");

                    b.ToTable("DeletionLog");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.FieldDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("DataProperty")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Data_property");

                    b.Property<int>("FolderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FolderReferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IndexDb")
                        .HasColumnType("INTEGER")
                        .HasColumnName("indexDb");

                    b.Property<bool>("IsSyncronized")
                        .HasColumnType("INTEGER")
                        .HasColumnName("syncronized");

                    b.Property<int>("MaxSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("max_size");

                    b.Property<int>("MinSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("min_size");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("QuicksearchField")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quicksearch_field");

                    b.Property<bool>("Restriction")
                        .HasColumnType("INTEGER")
                        .HasColumnName("restriction");

                    b.Property<string>("RestrictionErrMsg")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnName("restrictionErrMsg");

                    b.Property<string>("RestrictionMutch")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("match_expr");

                    b.Property<bool>("RestrictionScript")
                        .HasColumnType("INTEGER")
                        .HasColumnName("restrictionScript");

                    b.Property<int>("RestrictionScriptId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("restrictionScriptId");

                    b.Property<byte>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WriteHistory")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("FolderReferenceId");

                    b.ToTable("FieldDefinitions");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.Form", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FolderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<byte>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("Form");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Attribute")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("smalldatetime");

                    b.Property<byte>("Format")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NewValue")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<long>("ObjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OldValue")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserField")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ObjectId");

                    b.HasIndex("ObjectId", "UserField", "State");

                    b.ToTable("ObjHistory");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.ListProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("FieldId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FolderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("FolderId", "FieldId");

                    b.ToTable("ListProperties");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.ModifyAction", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActionType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FolderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Script")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("ActionType", "FolderId");

                    b.ToTable("ModifyActions");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.Numbering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("FieldId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userField");

                    b.Property<int?>("FieldWidth")
                        .HasColumnType("INTEGER")
                        .HasColumnName("field_width");

                    b.Property<bool>("FillWithZeros")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fill_zeroes");

                    b.Property<int>("FolderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("folder");

                    b.Property<string>("MinimumValue")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT")
                        .HasColumnName("minimum_value")
                        .IsFixedLength();

                    b.Property<string>("Prefix")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("prefix");

                    b.Property<bool>("ShareNumbers")
                        .HasColumnType("INTEGER")
                        .HasColumnName("share_numbers");

                    b.Property<string>("Suffix")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("suffix");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("FolderId");

                    b.ToTable("Numbering");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.ObjectDef", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("AppUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("created");

                    b.Property<int>("FolderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("folder");

                    b.Property<int>("UserDeletedById")
                        .HasColumnType("INTEGER")
                        .HasColumnName("deleted_by_user");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("ObjectDef");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.ObjectFolder", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("ClosePictureId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("picture_open");

                    b.Property<bool>("InheritNs")
                        .HasColumnType("INTEGER")
                        .HasColumnName("inherit_ns");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("NamingScheme")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name_scheme");

                    b.Property<int>("OpenPictureId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("picture_close");

                    b.Property<int>("ParentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("parent");

                    b.Property<int?>("PictureCloseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PictureOpenId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WfHistoryFieldId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("wfHistory_fld");

                    b.HasKey("Id");

                    b.HasIndex("Alias");

                    b.HasIndex("ParentId");

                    b.HasIndex("PictureCloseId");

                    b.HasIndex("PictureOpenId");

                    b.ToTable("ObjectFolder");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.Picture", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<byte[]>("Data")
                        .HasColumnType("BLOB")
                        .HasColumnName("data");

                    b.Property<bool>("IsIcon")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.Rule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RefId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("RuleType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.SchemaFieldDefinition", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<short>("DataType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("data_type");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("fieldname");

                    b.Property<short>("FieldPosition")
                        .HasColumnType("INTEGER")
                        .HasColumnName("field_pos");

                    b.Property<int>("FieldSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("field_size");

                    b.Property<bool>("HasIndex")
                        .HasColumnType("INTEGER")
                        .HasColumnName("has_index");

                    b.Property<int>("SchemaDefId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("tab_id");

                    b.Property<int?>("SchemeDefId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SchemeDefId");

                    b.ToTable("SchemeFieldsDef");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.SchemaHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeletedArea")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Deleted_Area");

                    b.Property<int>("DeletedReference")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Deleted_Reference");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("FolderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Folder_Id");

                    b.Property<string>("FolderName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("Folder_Name")
                        .IsFixedLength();

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("Ip_Address")
                        .IsFixedLength();

                    b.Property<string>("NewName")
                        .HasColumnType("TEXT")
                        .HasColumnName("New_Name");

                    b.Property<int?>("ObjectFolderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OldName")
                        .HasColumnType("TEXT")
                        .HasColumnName("Old_Name");

                    b.Property<int>("Reference")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("User_Id");

                    b.Property<string>("Username")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .IsFixedLength();

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("ObjectFolderId");

                    b.ToTable("SchemaHistory");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.SchemeTableDefinition", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER")
                        .HasColumnName("deleted");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("tableName");

                    b.HasKey("Id");

                    b.ToTable("SchemeTableDef");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.Script", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DetermFldsValid")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FolderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(254)
                        .HasColumnType("TEXT");

                    b.Property<byte?>("NumParams")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Num_params");

                    b.Property<int?>("Ref")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScriptCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("Scripts");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.ScriptHistory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("smalldatetime");

                    b.Property<int?>("PublishedBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Script")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SourceScriptId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SourceScriptId");

                    b.ToTable("ScriptHistory");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.SummaryAddFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FieldId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SummaryDefId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("SummaryDefId");

                    b.ToTable("SummaryAddFields");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.SummaryAddFieldsStps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddFieldId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FieldDefId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AddFieldId");

                    b.HasIndex("FieldDefId");

                    b.ToTable("SummaryAddFieldsStps");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.SummaryDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FolderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ModifObjFlags")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("RecalcAfterRemove")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RefField")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ScriptId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("StoreZero")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("SummaryDefinition");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.SummaryFieldSteps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FieldDefId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FieldId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SummaryDefId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FieldDefId");

                    b.HasIndex("SummaryDefId");

                    b.ToTable("SummaryFieldSteps");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.SummaryResultFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FieldDefId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SummaryDefId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FieldDefId");

                    b.HasIndex("SummaryDefId");

                    b.ToTable("SummaryResultFields");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.SynchRefFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("FieldId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("field");

                    b.Property<int>("PartnerFieldId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("partner_field");

                    b.Property<byte>("SynchOption")
                        .HasColumnType("INTEGER")
                        .HasColumnName("synch_option");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("PartnerFieldId");

                    b.ToTable("SynchRefFields");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.UserFieldProp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FieldId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Flag")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FolderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Script")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UseScript")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("FolderId");

                    b.ToTable("UserFieldProp");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.ViewLayoutTmp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FolderId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Layout")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("User_id");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("UserId");

                    b.ToTable("ViewLayoutTmp");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.WfState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("FieldId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FolderId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Initial")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("FolderId");

                    b.ToTable("WfStatus");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.WfStateTransition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FieldId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FolderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("New")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Old")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("FolderId");

                    b.ToTable("WfStateTransitions");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.WindowLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("Height")
                        .HasColumnType("INTEGER")
                        .HasColumnName("height");

                    b.Property<int?>("Left")
                        .HasColumnType("INTEGER")
                        .HasColumnName("left");

                    b.Property<bool?>("Maximized")
                        .HasColumnType("INTEGER")
                        .HasColumnName("maximized");

                    b.Property<byte[]>("PanesStream")
                        .HasColumnType("BLOB")
                        .HasColumnName("panes_stream");

                    b.Property<int?>("Top")
                        .HasColumnType("INTEGER")
                        .HasColumnName("top");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_");

                    b.Property<int?>("Width")
                        .HasColumnType("INTEGER")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WindowLayout");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.FormCondition", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FolderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FormId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(130)
                        .HasColumnType("TEXT")
                        .IsFixedLength();

                    b.Property<bool>("Object")
                        .HasColumnType("INTEGER");

                    b.Property<short>("Position")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("FormId");

                    b.ToTable("FormCondition");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.FormProperty", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DataType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<int>("Ref")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("RefType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FormProperty");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.ImportCmSteps", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("ColMappingId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("col_mapping_id");

                    b.Property<int>("FieldId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("userfield");

                    b.HasKey("Id");

                    b.HasIndex("ColMappingId");

                    b.HasIndex("FieldId");

                    b.ToTable("ImportCmStps");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.ImportColMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<byte>("AttachmentOption")
                        .HasColumnType("INTEGER")
                        .HasColumnName("attachment_option");

                    b.Property<int>("Dest")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dest");

                    b.Property<byte>("Flags")
                        .HasColumnType("INTEGER")
                        .HasColumnName("flags");

                    b.Property<int>("SettingsId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("settings_id");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT")
                        .HasColumnName("source")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("ImportColMapping");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.ImportFldDestFld", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("DestFolderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dest_folder");

                    b.Property<int>("FldSettingsId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fld_settings_id");

                    b.HasKey("Id");

                    b.HasIndex("DestFolderId");

                    b.ToTable("ImportFldDestFld");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.ImportFldIdFields", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("FieldId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ufd");

                    b.Property<int>("FldSettingsId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("fld_settings_id");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("ImportFldIdFields");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.ImportFolderSettgs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("BulkSize")
                        .HasColumnType("INTEGER")
                        .HasColumnName("bulk_size");

                    b.Property<bool>("CacheAllObjects")
                        .HasColumnType("INTEGER")
                        .HasColumnName("cache_all_objects");

                    b.Property<bool>("CompatibilityFlag")
                        .HasColumnType("INTEGER")
                        .HasColumnName("compatibility_flag");

                    b.Property<int>("FieldId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("field");

                    b.Property<bool>("IdFieldsNull")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_fields_null");

                    b.Property<bool>("IgnoreBasefilter")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ignore_basefilter");

                    b.Property<short>("ImportType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("import_type");

                    b.Property<bool>("IncludeSubfolders")
                        .HasColumnType("INTEGER")
                        .HasColumnName("include_subfolders");

                    b.Property<int>("Parent")
                        .HasColumnType("INTEGER")
                        .HasColumnName("parent");

                    b.Property<int?>("PerformanceFlags")
                        .HasColumnType("INTEGER")
                        .HasColumnName("performance_flags");

                    b.Property<int>("SettingId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("setting_id");

                    b.Property<bool>("UseCreationRule")
                        .HasColumnType("INTEGER")
                        .HasColumnName("use_creation_rule");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("SettingId");

                    b.ToTable("ImportFolderSettgs");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.ImportSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<short>("DataSourceType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("data_source_type");

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("database_name");

                    b.Property<short>("Flags")
                        .HasColumnType("INTEGER")
                        .HasColumnName("flags");

                    b.Property<string>("IdColumns")
                        .HasColumnType("TEXT")
                        .HasColumnName("id_columns");

                    b.Property<int>("Key")
                        .HasColumnType("INTEGER")
                        .HasColumnName("key");

                    b.Property<bool>("LogErrors")
                        .HasColumnType("INTEGER")
                        .HasColumnName("log_errors");

                    b.Property<string>("LogfilePrefix")
                        .HasMaxLength(80)
                        .HasColumnType("TEXT")
                        .HasColumnName("logfile_prefix")
                        .IsFixedLength();

                    b.Property<string>("Logpath")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT")
                        .HasColumnName("logpath")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT")
                        .HasColumnName("name")
                        .IsFixedLength();

                    b.Property<bool>("ReflistFull")
                        .HasColumnType("INTEGER")
                        .HasColumnName("reflist_full");

                    b.Property<bool>("RemoveRefs")
                        .HasColumnType("INTEGER")
                        .HasColumnName("remove_refs");

                    b.Property<string>("SqlStatement")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("sql_statement");

                    b.Property<bool>("UseSql")
                        .HasColumnType("INTEGER")
                        .HasColumnName("use_sql");

                    b.Property<int>("User")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_");

                    b.HasKey("Id");

                    b.ToTable("ImportSettings");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Privilege", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FolderId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Level")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("FolderId");

                    b.ToTable("Privilege");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.AppFolder", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectFolder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.AppFolderField", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.AppFolder", "AppFolder")
                        .WithMany()
                        .HasForeignKey("AppFolderId");

                    b.HasOne("FlexiObject.DbProvider.Entities.FieldDefinition", "FolderField")
                        .WithMany()
                        .HasForeignKey("FolderFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppFolder");

                    b.Navigation("FolderField");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.AppUser", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectDef", "Object")
                        .WithOne("AppUser")
                        .HasForeignKey("FlexiObject.DbProvider.Entities.AppUser", "ObjectId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_AppUser_To_ObjectDef");

                    b.Navigation("Object");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.AppUsersUserGroups", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.AppUser", "UserGroup")
                        .WithMany()
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlexiObject.DbProvider.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.AppearView", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectFolder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId");

                    b.HasOne("FlexiObject.DbProvider.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Folder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.Condition", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.Condition", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.ConditionParam", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId");

                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectDef", "Object")
                        .WithMany()
                        .HasForeignKey("ObjectId");

                    b.Navigation("Condition");

                    b.Navigation("Object");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.ConditionStps", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId");

                    b.HasOne("FlexiObject.DbProvider.Entities.FieldDefinition", "UserField")
                        .WithMany()
                        .HasForeignKey("UserFieldId");

                    b.Navigation("Condition");

                    b.Navigation("UserField");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.ConditionValueFields", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.ConditionParam", "CondParams")
                        .WithMany()
                        .HasForeignKey("CondParamsId");

                    b.HasOne("FlexiObject.DbProvider.Entities.FieldDefinition", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId");

                    b.Navigation("CondParams");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.DefaultValue", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectFolder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlexiObject.DbProvider.Entities.FieldDefinition", "UserField")
                        .WithMany()
                        .HasForeignKey("UserFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("UserField");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.FieldDefinition", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectFolder", "Folder")
                        .WithMany("FieldDefinitions")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FieldDefinition_ToObjectFolders");

                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectFolder", "FolderReference")
                        .WithMany()
                        .HasForeignKey("FolderReferenceId");

                    b.Navigation("Folder");

                    b.Navigation("FolderReference");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.Form", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectFolder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.History", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectDef", "Object")
                        .WithMany("HistoryList")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ObjHistory_ToObjDef");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Object");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.ListProperty", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.FieldDefinition", "Field")
                        .WithMany("ListProperties")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ListProperties_ToFieldDefinition");

                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectFolder", "Folder")
                        .WithMany("ListProperties")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ListProperties_ToObjectFolders");

                    b.Navigation("Field");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.ModifyAction", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectFolder", "Folder")
                        .WithMany("Actions")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.Numbering", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.FieldDefinition", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectFolder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.ObjectDef", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectFolder", "Folder")
                        .WithMany("Objects")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.ObjectFolder", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectFolder", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlexiObject.DbProvider.Entities.Picture", "PictureClose")
                        .WithMany()
                        .HasForeignKey("PictureCloseId");

                    b.HasOne("FlexiObject.DbProvider.Entities.Picture", "PictureOpen")
                        .WithMany()
                        .HasForeignKey("PictureOpenId");

                    b.Navigation("Parent");

                    b.Navigation("PictureClose");

                    b.Navigation("PictureOpen");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.SchemaFieldDefinition", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.SchemeTableDefinition", "SchemeDef")
                        .WithMany()
                        .HasForeignKey("SchemeDefId");

                    b.Navigation("SchemeDef");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.SchemaHistory", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectFolder", null)
                        .WithMany("HistoriEntries")
                        .HasForeignKey("ObjectFolderId");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.Script", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectFolder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.ScriptHistory", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.Script", "SourceScript")
                        .WithMany()
                        .HasForeignKey("SourceScriptId");

                    b.Navigation("SourceScript");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.SummaryAddFields", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.FieldDefinition", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlexiObject.DbProvider.Entities.SummaryDefinition", "SummaryDef")
                        .WithMany("SummaryAddFields")
                        .HasForeignKey("SummaryDefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SummaryAddFields_ToSummaryDefinition");

                    b.Navigation("Field");

                    b.Navigation("SummaryDef");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.SummaryAddFieldsStps", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.SummaryAddFields", "AddField")
                        .WithMany("SummaryAddFieldsStps")
                        .HasForeignKey("AddFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SummaryAddFieldsStps_SummaryAddFields");

                    b.HasOne("FlexiObject.DbProvider.Entities.FieldDefinition", "FieldDef")
                        .WithMany()
                        .HasForeignKey("FieldDefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddField");

                    b.Navigation("FieldDef");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.SummaryDefinition", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectFolder", "Folder")
                        .WithMany("SummaryDefinition")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SummaryDefinition_ToObjectFolders");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.SummaryFieldSteps", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.FieldDefinition", "FieldDef")
                        .WithMany()
                        .HasForeignKey("FieldDefId");

                    b.HasOne("FlexiObject.DbProvider.Entities.SummaryDefinition", "SummaryDef")
                        .WithMany("SummaryFieldSteps")
                        .HasForeignKey("SummaryDefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SummaryFieldSteps_ToSummaryDefinition");

                    b.Navigation("FieldDef");

                    b.Navigation("SummaryDef");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.SummaryResultFields", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.FieldDefinition", "FieldDef")
                        .WithMany()
                        .HasForeignKey("FieldDefId");

                    b.HasOne("FlexiObject.DbProvider.Entities.SummaryDefinition", "SummaryDef")
                        .WithMany("SummaryResultFields")
                        .HasForeignKey("SummaryDefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SummaryResultFields_ToSummaryDefinition");

                    b.Navigation("FieldDef");

                    b.Navigation("SummaryDef");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.SynchRefFields", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.FieldDefinition", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlexiObject.DbProvider.Entities.FieldDefinition", "PartnerField")
                        .WithMany()
                        .HasForeignKey("PartnerFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("PartnerField");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.UserFieldProp", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.FieldDefinition", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId");

                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectFolder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId");

                    b.Navigation("Field");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.ViewLayoutTmp", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectFolder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlexiObject.DbProvider.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.WfState", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.FieldDefinition", "Field")
                        .WithMany("Status")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Status_ToFieldDefinition");

                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectFolder", "Folder")
                        .WithMany("WfStates")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.WfStateTransition", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.FieldDefinition", "Field")
                        .WithMany("StateTransitions")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StateTransitions_ToStatus");

                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectFolder", "Folder")
                        .WithMany("WfStateTransitions")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StateTransitions_ObjectFolder");

                    b.Navigation("Field");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.WindowLayout", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.FormCondition", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectFolder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId");

                    b.HasOne("FlexiObject.DbProvider.Entities.Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId");

                    b.Navigation("Folder");

                    b.Navigation("Form");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.ImportCmSteps", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.ImportColMapping", "ColMapping")
                        .WithMany()
                        .HasForeignKey("ColMappingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlexiObject.DbProvider.Entities.FieldDefinition", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ColMapping");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.ImportFldDestFld", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectFolder", "DestFolder")
                        .WithMany()
                        .HasForeignKey("DestFolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestFolder");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.ImportFldIdFields", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.FieldDefinition", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.ImportFolderSettgs", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.FieldDefinition", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlexiObject.DbProvider.ImportSettings", "Setting")
                        .WithMany()
                        .HasForeignKey("SettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Setting");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Privilege", b =>
                {
                    b.HasOne("FlexiObject.DbProvider.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("FlexiObject.DbProvider.Entities.ObjectFolder", "Folder")
                        .WithMany("Privileges")
                        .HasForeignKey("FolderId");

                    b.Navigation("AppUser");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.FieldDefinition", b =>
                {
                    b.Navigation("ListProperties");

                    b.Navigation("StateTransitions");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.ObjectDef", b =>
                {
                    b.Navigation("AppUser");

                    b.Navigation("HistoryList");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.ObjectFolder", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("FieldDefinitions");

                    b.Navigation("HistoriEntries");

                    b.Navigation("ListProperties");

                    b.Navigation("Objects");

                    b.Navigation("Privileges");

                    b.Navigation("SummaryDefinition");

                    b.Navigation("WfStateTransitions");

                    b.Navigation("WfStates");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.SummaryAddFields", b =>
                {
                    b.Navigation("SummaryAddFieldsStps");
                });

            modelBuilder.Entity("FlexiObject.DbProvider.Entities.SummaryDefinition", b =>
                {
                    b.Navigation("SummaryAddFields");

                    b.Navigation("SummaryFieldSteps");

                    b.Navigation("SummaryResultFields");
                });
#pragma warning restore 612, 618
        }
    }
}
